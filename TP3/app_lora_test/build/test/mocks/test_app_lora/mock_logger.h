/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LOGGER_H
#define _MOCK_LOGGER_H

#include "unity.h"
#include "logger.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_logger_Init(void);
void mock_logger_Destroy(void);
void mock_logger_Verify(void);




#define logger_init_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("logger_init requires _Ignore (not AndReturn)");
#define logger_init_Ignore() logger_init_CMockIgnore()
void logger_init_CMockIgnore(void);
#define logger_init_StopIgnore() logger_init_CMockStopIgnore()
void logger_init_CMockStopIgnore(void);
#define logger_init_ExpectAndReturn(level, cmock_retval) TEST_FAIL_MESSAGE("logger_init requires _Expect (not AndReturn)");
#define logger_init_Expect(level) logger_init_CMockExpect(__LINE__, level)
void logger_init_CMockExpect(UNITY_LINE_TYPE cmock_line, log_level_t level);
typedef void (* CMOCK_logger_init_CALLBACK)(log_level_t level, int cmock_num_calls);
void logger_init_AddCallback(CMOCK_logger_init_CALLBACK Callback);
void logger_init_Stub(CMOCK_logger_init_CALLBACK Callback);
#define logger_init_StubWithCallback logger_init_Stub
#define logger_log_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("logger_log requires _Ignore (not AndReturn)");
#define logger_log_Ignore() logger_log_CMockIgnore()
void logger_log_CMockIgnore(void);
#define logger_log_StopIgnore() logger_log_CMockStopIgnore()
void logger_log_CMockStopIgnore(void);
#define logger_log_ExpectAndReturn(level, format, cmock_retval) TEST_FAIL_MESSAGE("logger_log requires _Expect (not AndReturn)");
#define logger_log_Expect(level, format) logger_log_CMockExpect(__LINE__, level, format)
void logger_log_CMockExpect(UNITY_LINE_TYPE cmock_line, log_level_t level, const char* format);
typedef void (* CMOCK_logger_log_CALLBACK)(log_level_t level, const char* format, int cmock_num_calls);
void logger_log_AddCallback(CMOCK_logger_log_CALLBACK Callback);
void logger_log_Stub(CMOCK_logger_log_CALLBACK Callback);
#define logger_log_StubWithCallback logger_log_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
