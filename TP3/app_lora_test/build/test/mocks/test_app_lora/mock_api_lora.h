/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_API_LORA_H
#define _MOCK_API_LORA_H

#include "unity.h"
#include "api_lora.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_api_lora_Init(void);
void mock_api_lora_Destroy(void);
void mock_api_lora_Verify(void);




#define LoRaBegin_Ignore() TEST_FAIL_MESSAGE("LoRaBegin requires _IgnoreAndReturn");
#define LoRaBegin_IgnoreAndReturn(cmock_retval) LoRaBegin_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void LoRaBegin_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int16_t cmock_to_return);
#define LoRaBegin_StopIgnore() LoRaBegin_CMockStopIgnore()
void LoRaBegin_CMockStopIgnore(void);
#define LoRaBegin_Expect(frequencyInHz, txPowerInDbm, tcxoVoltage, useRegulatorLDO) TEST_FAIL_MESSAGE("LoRaBegin requires _ExpectAndReturn");
#define LoRaBegin_ExpectAndReturn(frequencyInHz, txPowerInDbm, tcxoVoltage, useRegulatorLDO, cmock_retval) LoRaBegin_CMockExpectAndReturn(__LINE__, frequencyInHz, txPowerInDbm, tcxoVoltage, useRegulatorLDO, cmock_retval)
void LoRaBegin_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t frequencyInHz, int8_t txPowerInDbm, float tcxoVoltage, bool useRegulatorLDO, int16_t cmock_to_return);
typedef int16_t (* CMOCK_LoRaBegin_CALLBACK)(uint32_t frequencyInHz, int8_t txPowerInDbm, float tcxoVoltage, bool useRegulatorLDO, int cmock_num_calls);
void LoRaBegin_AddCallback(CMOCK_LoRaBegin_CALLBACK Callback);
void LoRaBegin_Stub(CMOCK_LoRaBegin_CALLBACK Callback);
#define LoRaBegin_StubWithCallback LoRaBegin_Stub
#define LoRaConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LoRaConfig requires _Ignore (not AndReturn)");
#define LoRaConfig_Ignore() LoRaConfig_CMockIgnore()
void LoRaConfig_CMockIgnore(void);
#define LoRaConfig_StopIgnore() LoRaConfig_CMockStopIgnore()
void LoRaConfig_CMockStopIgnore(void);
#define LoRaConfig_ExpectAndReturn(spreadingFactor, bandwidth, codingRate, preambleLength, payloadLen, crcOn, invertIrq, cmock_retval) TEST_FAIL_MESSAGE("LoRaConfig requires _Expect (not AndReturn)");
#define LoRaConfig_Expect(spreadingFactor, bandwidth, codingRate, preambleLength, payloadLen, crcOn, invertIrq) LoRaConfig_CMockExpect(__LINE__, spreadingFactor, bandwidth, codingRate, preambleLength, payloadLen, crcOn, invertIrq)
void LoRaConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t spreadingFactor, uint8_t bandwidth, uint8_t codingRate, uint16_t preambleLength, uint8_t payloadLen, bool crcOn, bool invertIrq);
typedef void (* CMOCK_LoRaConfig_CALLBACK)(uint8_t spreadingFactor, uint8_t bandwidth, uint8_t codingRate, uint16_t preambleLength, uint8_t payloadLen, bool crcOn, bool invertIrq, int cmock_num_calls);
void LoRaConfig_AddCallback(CMOCK_LoRaConfig_CALLBACK Callback);
void LoRaConfig_Stub(CMOCK_LoRaConfig_CALLBACK Callback);
#define LoRaConfig_StubWithCallback LoRaConfig_Stub
#define LoRaReceive_Ignore() TEST_FAIL_MESSAGE("LoRaReceive requires _IgnoreAndReturn");
#define LoRaReceive_IgnoreAndReturn(cmock_retval) LoRaReceive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void LoRaReceive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define LoRaReceive_StopIgnore() LoRaReceive_CMockStopIgnore()
void LoRaReceive_CMockStopIgnore(void);
#define LoRaReceive_Expect(pData, len) TEST_FAIL_MESSAGE("LoRaReceive requires _ExpectAndReturn");
#define LoRaReceive_ExpectAndReturn(pData, len, cmock_retval) LoRaReceive_CMockExpectAndReturn(__LINE__, pData, len, cmock_retval)
void LoRaReceive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pData, int16_t len, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_LoRaReceive_CALLBACK)(uint8_t* pData, int16_t len, int cmock_num_calls);
void LoRaReceive_AddCallback(CMOCK_LoRaReceive_CALLBACK Callback);
void LoRaReceive_Stub(CMOCK_LoRaReceive_CALLBACK Callback);
#define LoRaReceive_StubWithCallback LoRaReceive_Stub
#define LoRaSend_Ignore() TEST_FAIL_MESSAGE("LoRaSend requires _IgnoreAndReturn");
#define LoRaSend_IgnoreAndReturn(cmock_retval) LoRaSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void LoRaSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define LoRaSend_StopIgnore() LoRaSend_CMockStopIgnore()
void LoRaSend_CMockStopIgnore(void);
#define LoRaSend_Expect(pData, len, mode) TEST_FAIL_MESSAGE("LoRaSend requires _ExpectAndReturn");
#define LoRaSend_ExpectAndReturn(pData, len, mode, cmock_retval) LoRaSend_CMockExpectAndReturn(__LINE__, pData, len, mode, cmock_retval)
void LoRaSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* pData, int16_t len, uint8_t mode, bool cmock_to_return);
typedef bool (* CMOCK_LoRaSend_CALLBACK)(uint8_t* pData, int16_t len, uint8_t mode, int cmock_num_calls);
void LoRaSend_AddCallback(CMOCK_LoRaSend_CALLBACK Callback);
void LoRaSend_Stub(CMOCK_LoRaSend_CALLBACK Callback);
#define LoRaSend_StubWithCallback LoRaSend_Stub
#define LoRaDebugPrint_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LoRaDebugPrint requires _Ignore (not AndReturn)");
#define LoRaDebugPrint_Ignore() LoRaDebugPrint_CMockIgnore()
void LoRaDebugPrint_CMockIgnore(void);
#define LoRaDebugPrint_StopIgnore() LoRaDebugPrint_CMockStopIgnore()
void LoRaDebugPrint_CMockStopIgnore(void);
#define LoRaDebugPrint_ExpectAndReturn(enable, cmock_retval) TEST_FAIL_MESSAGE("LoRaDebugPrint requires _Expect (not AndReturn)");
#define LoRaDebugPrint_Expect(enable) LoRaDebugPrint_CMockExpect(__LINE__, enable)
void LoRaDebugPrint_CMockExpect(UNITY_LINE_TYPE cmock_line, bool enable);
typedef void (* CMOCK_LoRaDebugPrint_CALLBACK)(bool enable, int cmock_num_calls);
void LoRaDebugPrint_AddCallback(CMOCK_LoRaDebugPrint_CALLBACK Callback);
void LoRaDebugPrint_Stub(CMOCK_LoRaDebugPrint_CALLBACK Callback);
#define LoRaDebugPrint_StubWithCallback LoRaDebugPrint_Stub
#define spi_write_byte_Ignore() TEST_FAIL_MESSAGE("spi_write_byte requires _IgnoreAndReturn");
#define spi_write_byte_IgnoreAndReturn(cmock_retval) spi_write_byte_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_write_byte_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define spi_write_byte_StopIgnore() spi_write_byte_CMockStopIgnore()
void spi_write_byte_CMockStopIgnore(void);
#define spi_write_byte_Expect(Dataout, DataLength) TEST_FAIL_MESSAGE("spi_write_byte requires _ExpectAndReturn");
#define spi_write_byte_ExpectAndReturn(Dataout, DataLength, cmock_retval) spi_write_byte_CMockExpectAndReturn(__LINE__, Dataout, DataLength, cmock_retval)
void spi_write_byte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* Dataout, size_t DataLength, bool cmock_to_return);
typedef bool (* CMOCK_spi_write_byte_CALLBACK)(uint8_t* Dataout, size_t DataLength, int cmock_num_calls);
void spi_write_byte_AddCallback(CMOCK_spi_write_byte_CALLBACK Callback);
void spi_write_byte_Stub(CMOCK_spi_write_byte_CALLBACK Callback);
#define spi_write_byte_StubWithCallback spi_write_byte_Stub
#define spi_read_byte_Ignore() TEST_FAIL_MESSAGE("spi_read_byte requires _IgnoreAndReturn");
#define spi_read_byte_IgnoreAndReturn(cmock_retval) spi_read_byte_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_read_byte_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define spi_read_byte_StopIgnore() spi_read_byte_CMockStopIgnore()
void spi_read_byte_CMockStopIgnore(void);
#define spi_read_byte_Expect(Datain, Dataout, DataLength) TEST_FAIL_MESSAGE("spi_read_byte requires _ExpectAndReturn");
#define spi_read_byte_ExpectAndReturn(Datain, Dataout, DataLength, cmock_retval) spi_read_byte_CMockExpectAndReturn(__LINE__, Datain, Dataout, DataLength, cmock_retval)
void spi_read_byte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* Datain, uint8_t* Dataout, size_t DataLength, bool cmock_to_return);
typedef bool (* CMOCK_spi_read_byte_CALLBACK)(uint8_t* Datain, uint8_t* Dataout, size_t DataLength, int cmock_num_calls);
void spi_read_byte_AddCallback(CMOCK_spi_read_byte_CALLBACK Callback);
void spi_read_byte_Stub(CMOCK_spi_read_byte_CALLBACK Callback);
#define spi_read_byte_StubWithCallback spi_read_byte_Stub
#define spi_transfer_Ignore() TEST_FAIL_MESSAGE("spi_transfer requires _IgnoreAndReturn");
#define spi_transfer_IgnoreAndReturn(cmock_retval) spi_transfer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_transfer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define spi_transfer_StopIgnore() spi_transfer_CMockStopIgnore()
void spi_transfer_CMockStopIgnore(void);
#define spi_transfer_Expect(address) TEST_FAIL_MESSAGE("spi_transfer requires _ExpectAndReturn");
#define spi_transfer_ExpectAndReturn(address, cmock_retval) spi_transfer_CMockExpectAndReturn(__LINE__, address, cmock_retval)
void spi_transfer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t address, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_spi_transfer_CALLBACK)(uint8_t address, int cmock_num_calls);
void spi_transfer_AddCallback(CMOCK_spi_transfer_CALLBACK Callback);
void spi_transfer_Stub(CMOCK_spi_transfer_CALLBACK Callback);
#define spi_transfer_StubWithCallback spi_transfer_Stub
#define ReceiveMode_Ignore() TEST_FAIL_MESSAGE("ReceiveMode requires _IgnoreAndReturn");
#define ReceiveMode_IgnoreAndReturn(cmock_retval) ReceiveMode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ReceiveMode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ReceiveMode_StopIgnore() ReceiveMode_CMockStopIgnore()
void ReceiveMode_CMockStopIgnore(void);
#define ReceiveMode_Expect() TEST_FAIL_MESSAGE("ReceiveMode requires _ExpectAndReturn");
#define ReceiveMode_ExpectAndReturn(cmock_retval) ReceiveMode_CMockExpectAndReturn(__LINE__, cmock_retval)
void ReceiveMode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_ReceiveMode_CALLBACK)(int cmock_num_calls);
void ReceiveMode_AddCallback(CMOCK_ReceiveMode_CALLBACK Callback);
void ReceiveMode_Stub(CMOCK_ReceiveMode_CALLBACK Callback);
#define ReceiveMode_StubWithCallback ReceiveMode_Stub
#define GetPacketStatus_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("GetPacketStatus requires _Ignore (not AndReturn)");
#define GetPacketStatus_Ignore() GetPacketStatus_CMockIgnore()
void GetPacketStatus_CMockIgnore(void);
#define GetPacketStatus_StopIgnore() GetPacketStatus_CMockStopIgnore()
void GetPacketStatus_CMockStopIgnore(void);
#define GetPacketStatus_ExpectAndReturn(rssiPacket, snrPacket, cmock_retval) TEST_FAIL_MESSAGE("GetPacketStatus requires _Expect (not AndReturn)");
#define GetPacketStatus_Expect(rssiPacket, snrPacket) GetPacketStatus_CMockExpect(__LINE__, rssiPacket, snrPacket)
void GetPacketStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, int8_t* rssiPacket, int8_t* snrPacket);
typedef void (* CMOCK_GetPacketStatus_CALLBACK)(int8_t* rssiPacket, int8_t* snrPacket, int cmock_num_calls);
void GetPacketStatus_AddCallback(CMOCK_GetPacketStatus_CALLBACK Callback);
void GetPacketStatus_Stub(CMOCK_GetPacketStatus_CALLBACK Callback);
#define GetPacketStatus_StubWithCallback GetPacketStatus_Stub
#define SetTxPower_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetTxPower requires _Ignore (not AndReturn)");
#define SetTxPower_Ignore() SetTxPower_CMockIgnore()
void SetTxPower_CMockIgnore(void);
#define SetTxPower_StopIgnore() SetTxPower_CMockStopIgnore()
void SetTxPower_CMockStopIgnore(void);
#define SetTxPower_ExpectAndReturn(txPowerInDbm, cmock_retval) TEST_FAIL_MESSAGE("SetTxPower requires _Expect (not AndReturn)");
#define SetTxPower_Expect(txPowerInDbm) SetTxPower_CMockExpect(__LINE__, txPowerInDbm)
void SetTxPower_CMockExpect(UNITY_LINE_TYPE cmock_line, int8_t txPowerInDbm);
typedef void (* CMOCK_SetTxPower_CALLBACK)(int8_t txPowerInDbm, int cmock_num_calls);
void SetTxPower_AddCallback(CMOCK_SetTxPower_CALLBACK Callback);
void SetTxPower_Stub(CMOCK_SetTxPower_CALLBACK Callback);
#define SetTxPower_StubWithCallback SetTxPower_Stub
#define FixInvertedIQ_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("FixInvertedIQ requires _Ignore (not AndReturn)");
#define FixInvertedIQ_Ignore() FixInvertedIQ_CMockIgnore()
void FixInvertedIQ_CMockIgnore(void);
#define FixInvertedIQ_StopIgnore() FixInvertedIQ_CMockStopIgnore()
void FixInvertedIQ_CMockStopIgnore(void);
#define FixInvertedIQ_ExpectAndReturn(iqConfig, cmock_retval) TEST_FAIL_MESSAGE("FixInvertedIQ requires _Expect (not AndReturn)");
#define FixInvertedIQ_Expect(iqConfig) FixInvertedIQ_CMockExpect(__LINE__, iqConfig)
void FixInvertedIQ_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t iqConfig);
typedef void (* CMOCK_FixInvertedIQ_CALLBACK)(uint8_t iqConfig, int cmock_num_calls);
void FixInvertedIQ_AddCallback(CMOCK_FixInvertedIQ_CALLBACK Callback);
void FixInvertedIQ_Stub(CMOCK_FixInvertedIQ_CALLBACK Callback);
#define FixInvertedIQ_StubWithCallback FixInvertedIQ_Stub
#define SetDio3AsTcxoCtrl_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetDio3AsTcxoCtrl requires _Ignore (not AndReturn)");
#define SetDio3AsTcxoCtrl_Ignore() SetDio3AsTcxoCtrl_CMockIgnore()
void SetDio3AsTcxoCtrl_CMockIgnore(void);
#define SetDio3AsTcxoCtrl_StopIgnore() SetDio3AsTcxoCtrl_CMockStopIgnore()
void SetDio3AsTcxoCtrl_CMockStopIgnore(void);
#define SetDio3AsTcxoCtrl_ExpectAndReturn(voltage, delay, cmock_retval) TEST_FAIL_MESSAGE("SetDio3AsTcxoCtrl requires _Expect (not AndReturn)");
#define SetDio3AsTcxoCtrl_Expect(voltage, delay) SetDio3AsTcxoCtrl_CMockExpect(__LINE__, voltage, delay)
void SetDio3AsTcxoCtrl_CMockExpect(UNITY_LINE_TYPE cmock_line, float voltage, uint32_t delay);
typedef void (* CMOCK_SetDio3AsTcxoCtrl_CALLBACK)(float voltage, uint32_t delay, int cmock_num_calls);
void SetDio3AsTcxoCtrl_AddCallback(CMOCK_SetDio3AsTcxoCtrl_CALLBACK Callback);
void SetDio3AsTcxoCtrl_Stub(CMOCK_SetDio3AsTcxoCtrl_CALLBACK Callback);
#define SetDio3AsTcxoCtrl_StubWithCallback SetDio3AsTcxoCtrl_Stub
#define SetDio2AsRfSwitchCtrl_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetDio2AsRfSwitchCtrl requires _Ignore (not AndReturn)");
#define SetDio2AsRfSwitchCtrl_Ignore() SetDio2AsRfSwitchCtrl_CMockIgnore()
void SetDio2AsRfSwitchCtrl_CMockIgnore(void);
#define SetDio2AsRfSwitchCtrl_StopIgnore() SetDio2AsRfSwitchCtrl_CMockStopIgnore()
void SetDio2AsRfSwitchCtrl_CMockStopIgnore(void);
#define SetDio2AsRfSwitchCtrl_ExpectAndReturn(enable, cmock_retval) TEST_FAIL_MESSAGE("SetDio2AsRfSwitchCtrl requires _Expect (not AndReturn)");
#define SetDio2AsRfSwitchCtrl_Expect(enable) SetDio2AsRfSwitchCtrl_CMockExpect(__LINE__, enable)
void SetDio2AsRfSwitchCtrl_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t enable);
typedef void (* CMOCK_SetDio2AsRfSwitchCtrl_CALLBACK)(uint8_t enable, int cmock_num_calls);
void SetDio2AsRfSwitchCtrl_AddCallback(CMOCK_SetDio2AsRfSwitchCtrl_CALLBACK Callback);
void SetDio2AsRfSwitchCtrl_Stub(CMOCK_SetDio2AsRfSwitchCtrl_CALLBACK Callback);
#define SetDio2AsRfSwitchCtrl_StubWithCallback SetDio2AsRfSwitchCtrl_Stub
#define Reset_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("Reset requires _Ignore (not AndReturn)");
#define Reset_Ignore() Reset_CMockIgnore()
void Reset_CMockIgnore(void);
#define Reset_StopIgnore() Reset_CMockStopIgnore()
void Reset_CMockStopIgnore(void);
#define Reset_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("Reset requires _Expect (not AndReturn)");
#define Reset_Expect() Reset_CMockExpect(__LINE__)
void Reset_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Reset_CALLBACK)(int cmock_num_calls);
void Reset_AddCallback(CMOCK_Reset_CALLBACK Callback);
void Reset_Stub(CMOCK_Reset_CALLBACK Callback);
#define Reset_StubWithCallback Reset_Stub
#define SetStandby_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetStandby requires _Ignore (not AndReturn)");
#define SetStandby_Ignore() SetStandby_CMockIgnore()
void SetStandby_CMockIgnore(void);
#define SetStandby_StopIgnore() SetStandby_CMockStopIgnore()
void SetStandby_CMockStopIgnore(void);
#define SetStandby_ExpectAndReturn(mode, cmock_retval) TEST_FAIL_MESSAGE("SetStandby requires _Expect (not AndReturn)");
#define SetStandby_Expect(mode) SetStandby_CMockExpect(__LINE__, mode)
void SetStandby_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t mode);
typedef void (* CMOCK_SetStandby_CALLBACK)(uint8_t mode, int cmock_num_calls);
void SetStandby_AddCallback(CMOCK_SetStandby_CALLBACK Callback);
void SetStandby_Stub(CMOCK_SetStandby_CALLBACK Callback);
#define SetStandby_StubWithCallback SetStandby_Stub
#define SetRfFrequency_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetRfFrequency requires _Ignore (not AndReturn)");
#define SetRfFrequency_Ignore() SetRfFrequency_CMockIgnore()
void SetRfFrequency_CMockIgnore(void);
#define SetRfFrequency_StopIgnore() SetRfFrequency_CMockStopIgnore()
void SetRfFrequency_CMockStopIgnore(void);
#define SetRfFrequency_ExpectAndReturn(frequency, cmock_retval) TEST_FAIL_MESSAGE("SetRfFrequency requires _Expect (not AndReturn)");
#define SetRfFrequency_Expect(frequency) SetRfFrequency_CMockExpect(__LINE__, frequency)
void SetRfFrequency_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t frequency);
typedef void (* CMOCK_SetRfFrequency_CALLBACK)(uint32_t frequency, int cmock_num_calls);
void SetRfFrequency_AddCallback(CMOCK_SetRfFrequency_CALLBACK Callback);
void SetRfFrequency_Stub(CMOCK_SetRfFrequency_CALLBACK Callback);
#define SetRfFrequency_StubWithCallback SetRfFrequency_Stub
#define Calibrate_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("Calibrate requires _Ignore (not AndReturn)");
#define Calibrate_Ignore() Calibrate_CMockIgnore()
void Calibrate_CMockIgnore(void);
#define Calibrate_StopIgnore() Calibrate_CMockStopIgnore()
void Calibrate_CMockStopIgnore(void);
#define Calibrate_ExpectAndReturn(calibParam, cmock_retval) TEST_FAIL_MESSAGE("Calibrate requires _Expect (not AndReturn)");
#define Calibrate_Expect(calibParam) Calibrate_CMockExpect(__LINE__, calibParam)
void Calibrate_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t calibParam);
typedef void (* CMOCK_Calibrate_CALLBACK)(uint8_t calibParam, int cmock_num_calls);
void Calibrate_AddCallback(CMOCK_Calibrate_CALLBACK Callback);
void Calibrate_Stub(CMOCK_Calibrate_CALLBACK Callback);
#define Calibrate_StubWithCallback Calibrate_Stub
#define CalibrateImage_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("CalibrateImage requires _Ignore (not AndReturn)");
#define CalibrateImage_Ignore() CalibrateImage_CMockIgnore()
void CalibrateImage_CMockIgnore(void);
#define CalibrateImage_StopIgnore() CalibrateImage_CMockStopIgnore()
void CalibrateImage_CMockStopIgnore(void);
#define CalibrateImage_ExpectAndReturn(frequency, cmock_retval) TEST_FAIL_MESSAGE("CalibrateImage requires _Expect (not AndReturn)");
#define CalibrateImage_Expect(frequency) CalibrateImage_CMockExpect(__LINE__, frequency)
void CalibrateImage_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t frequency);
typedef void (* CMOCK_CalibrateImage_CALLBACK)(uint32_t frequency, int cmock_num_calls);
void CalibrateImage_AddCallback(CMOCK_CalibrateImage_CALLBACK Callback);
void CalibrateImage_Stub(CMOCK_CalibrateImage_CALLBACK Callback);
#define CalibrateImage_StubWithCallback CalibrateImage_Stub
#define SetRegulatorMode_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetRegulatorMode requires _Ignore (not AndReturn)");
#define SetRegulatorMode_Ignore() SetRegulatorMode_CMockIgnore()
void SetRegulatorMode_CMockIgnore(void);
#define SetRegulatorMode_StopIgnore() SetRegulatorMode_CMockStopIgnore()
void SetRegulatorMode_CMockStopIgnore(void);
#define SetRegulatorMode_ExpectAndReturn(mode, cmock_retval) TEST_FAIL_MESSAGE("SetRegulatorMode requires _Expect (not AndReturn)");
#define SetRegulatorMode_Expect(mode) SetRegulatorMode_CMockExpect(__LINE__, mode)
void SetRegulatorMode_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t mode);
typedef void (* CMOCK_SetRegulatorMode_CALLBACK)(uint8_t mode, int cmock_num_calls);
void SetRegulatorMode_AddCallback(CMOCK_SetRegulatorMode_CALLBACK Callback);
void SetRegulatorMode_Stub(CMOCK_SetRegulatorMode_CALLBACK Callback);
#define SetRegulatorMode_StubWithCallback SetRegulatorMode_Stub
#define SetBufferBaseAddress_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetBufferBaseAddress requires _Ignore (not AndReturn)");
#define SetBufferBaseAddress_Ignore() SetBufferBaseAddress_CMockIgnore()
void SetBufferBaseAddress_CMockIgnore(void);
#define SetBufferBaseAddress_StopIgnore() SetBufferBaseAddress_CMockStopIgnore()
void SetBufferBaseAddress_CMockStopIgnore(void);
#define SetBufferBaseAddress_ExpectAndReturn(txBaseAddress, rxBaseAddress, cmock_retval) TEST_FAIL_MESSAGE("SetBufferBaseAddress requires _Expect (not AndReturn)");
#define SetBufferBaseAddress_Expect(txBaseAddress, rxBaseAddress) SetBufferBaseAddress_CMockExpect(__LINE__, txBaseAddress, rxBaseAddress)
void SetBufferBaseAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t txBaseAddress, uint8_t rxBaseAddress);
typedef void (* CMOCK_SetBufferBaseAddress_CALLBACK)(uint8_t txBaseAddress, uint8_t rxBaseAddress, int cmock_num_calls);
void SetBufferBaseAddress_AddCallback(CMOCK_SetBufferBaseAddress_CALLBACK Callback);
void SetBufferBaseAddress_Stub(CMOCK_SetBufferBaseAddress_CALLBACK Callback);
#define SetBufferBaseAddress_StubWithCallback SetBufferBaseAddress_Stub
#define SetPowerConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetPowerConfig requires _Ignore (not AndReturn)");
#define SetPowerConfig_Ignore() SetPowerConfig_CMockIgnore()
void SetPowerConfig_CMockIgnore(void);
#define SetPowerConfig_StopIgnore() SetPowerConfig_CMockStopIgnore()
void SetPowerConfig_CMockStopIgnore(void);
#define SetPowerConfig_ExpectAndReturn(power, rampTime, cmock_retval) TEST_FAIL_MESSAGE("SetPowerConfig requires _Expect (not AndReturn)");
#define SetPowerConfig_Expect(power, rampTime) SetPowerConfig_CMockExpect(__LINE__, power, rampTime)
void SetPowerConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, int8_t power, uint8_t rampTime);
typedef void (* CMOCK_SetPowerConfig_CALLBACK)(int8_t power, uint8_t rampTime, int cmock_num_calls);
void SetPowerConfig_AddCallback(CMOCK_SetPowerConfig_CALLBACK Callback);
void SetPowerConfig_Stub(CMOCK_SetPowerConfig_CALLBACK Callback);
#define SetPowerConfig_StubWithCallback SetPowerConfig_Stub
#define SetOvercurrentProtection_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetOvercurrentProtection requires _Ignore (not AndReturn)");
#define SetOvercurrentProtection_Ignore() SetOvercurrentProtection_CMockIgnore()
void SetOvercurrentProtection_CMockIgnore(void);
#define SetOvercurrentProtection_StopIgnore() SetOvercurrentProtection_CMockStopIgnore()
void SetOvercurrentProtection_CMockStopIgnore(void);
#define SetOvercurrentProtection_ExpectAndReturn(currentLimit, cmock_retval) TEST_FAIL_MESSAGE("SetOvercurrentProtection requires _Expect (not AndReturn)");
#define SetOvercurrentProtection_Expect(currentLimit) SetOvercurrentProtection_CMockExpect(__LINE__, currentLimit)
void SetOvercurrentProtection_CMockExpect(UNITY_LINE_TYPE cmock_line, float currentLimit);
typedef void (* CMOCK_SetOvercurrentProtection_CALLBACK)(float currentLimit, int cmock_num_calls);
void SetOvercurrentProtection_AddCallback(CMOCK_SetOvercurrentProtection_CALLBACK Callback);
void SetOvercurrentProtection_Stub(CMOCK_SetOvercurrentProtection_CALLBACK Callback);
#define SetOvercurrentProtection_StubWithCallback SetOvercurrentProtection_Stub
#define SetSyncWord_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetSyncWord requires _Ignore (not AndReturn)");
#define SetSyncWord_Ignore() SetSyncWord_CMockIgnore()
void SetSyncWord_CMockIgnore(void);
#define SetSyncWord_StopIgnore() SetSyncWord_CMockStopIgnore()
void SetSyncWord_CMockStopIgnore(void);
#define SetSyncWord_ExpectAndReturn(sync, cmock_retval) TEST_FAIL_MESSAGE("SetSyncWord requires _Expect (not AndReturn)");
#define SetSyncWord_Expect(sync) SetSyncWord_CMockExpect(__LINE__, sync)
void SetSyncWord_CMockExpect(UNITY_LINE_TYPE cmock_line, int16_t sync);
typedef void (* CMOCK_SetSyncWord_CALLBACK)(int16_t sync, int cmock_num_calls);
void SetSyncWord_AddCallback(CMOCK_SetSyncWord_CALLBACK Callback);
void SetSyncWord_Stub(CMOCK_SetSyncWord_CALLBACK Callback);
#define SetSyncWord_StubWithCallback SetSyncWord_Stub
#define SetPaConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetPaConfig requires _Ignore (not AndReturn)");
#define SetPaConfig_Ignore() SetPaConfig_CMockIgnore()
void SetPaConfig_CMockIgnore(void);
#define SetPaConfig_StopIgnore() SetPaConfig_CMockStopIgnore()
void SetPaConfig_CMockStopIgnore(void);
#define SetPaConfig_ExpectAndReturn(paDutyCycle, hpMax, deviceSel, paLut, cmock_retval) TEST_FAIL_MESSAGE("SetPaConfig requires _Expect (not AndReturn)");
#define SetPaConfig_Expect(paDutyCycle, hpMax, deviceSel, paLut) SetPaConfig_CMockExpect(__LINE__, paDutyCycle, hpMax, deviceSel, paLut)
void SetPaConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut);
typedef void (* CMOCK_SetPaConfig_CALLBACK)(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut, int cmock_num_calls);
void SetPaConfig_AddCallback(CMOCK_SetPaConfig_CALLBACK Callback);
void SetPaConfig_Stub(CMOCK_SetPaConfig_CALLBACK Callback);
#define SetPaConfig_StubWithCallback SetPaConfig_Stub
#define SetDioIrqParams_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetDioIrqParams requires _Ignore (not AndReturn)");
#define SetDioIrqParams_Ignore() SetDioIrqParams_CMockIgnore()
void SetDioIrqParams_CMockIgnore(void);
#define SetDioIrqParams_StopIgnore() SetDioIrqParams_CMockStopIgnore()
void SetDioIrqParams_CMockStopIgnore(void);
#define SetDioIrqParams_ExpectAndReturn(irqMask, dio1Mask, dio2Mask, dio3Mask, cmock_retval) TEST_FAIL_MESSAGE("SetDioIrqParams requires _Expect (not AndReturn)");
#define SetDioIrqParams_Expect(irqMask, dio1Mask, dio2Mask, dio3Mask) SetDioIrqParams_CMockExpect(__LINE__, irqMask, dio1Mask, dio2Mask, dio3Mask)
void SetDioIrqParams_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask);
typedef void (* CMOCK_SetDioIrqParams_CALLBACK)(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask, int cmock_num_calls);
void SetDioIrqParams_AddCallback(CMOCK_SetDioIrqParams_CALLBACK Callback);
void SetDioIrqParams_Stub(CMOCK_SetDioIrqParams_CALLBACK Callback);
#define SetDioIrqParams_StubWithCallback SetDioIrqParams_Stub
#define SetStopRxTimerOnPreambleDetect_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetStopRxTimerOnPreambleDetect requires _Ignore (not AndReturn)");
#define SetStopRxTimerOnPreambleDetect_Ignore() SetStopRxTimerOnPreambleDetect_CMockIgnore()
void SetStopRxTimerOnPreambleDetect_CMockIgnore(void);
#define SetStopRxTimerOnPreambleDetect_StopIgnore() SetStopRxTimerOnPreambleDetect_CMockStopIgnore()
void SetStopRxTimerOnPreambleDetect_CMockStopIgnore(void);
#define SetStopRxTimerOnPreambleDetect_ExpectAndReturn(enable, cmock_retval) TEST_FAIL_MESSAGE("SetStopRxTimerOnPreambleDetect requires _Expect (not AndReturn)");
#define SetStopRxTimerOnPreambleDetect_Expect(enable) SetStopRxTimerOnPreambleDetect_CMockExpect(__LINE__, enable)
void SetStopRxTimerOnPreambleDetect_CMockExpect(UNITY_LINE_TYPE cmock_line, bool enable);
typedef void (* CMOCK_SetStopRxTimerOnPreambleDetect_CALLBACK)(bool enable, int cmock_num_calls);
void SetStopRxTimerOnPreambleDetect_AddCallback(CMOCK_SetStopRxTimerOnPreambleDetect_CALLBACK Callback);
void SetStopRxTimerOnPreambleDetect_Stub(CMOCK_SetStopRxTimerOnPreambleDetect_CALLBACK Callback);
#define SetStopRxTimerOnPreambleDetect_StubWithCallback SetStopRxTimerOnPreambleDetect_Stub
#define SetLoRaSymbNumTimeout_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetLoRaSymbNumTimeout requires _Ignore (not AndReturn)");
#define SetLoRaSymbNumTimeout_Ignore() SetLoRaSymbNumTimeout_CMockIgnore()
void SetLoRaSymbNumTimeout_CMockIgnore(void);
#define SetLoRaSymbNumTimeout_StopIgnore() SetLoRaSymbNumTimeout_CMockStopIgnore()
void SetLoRaSymbNumTimeout_CMockStopIgnore(void);
#define SetLoRaSymbNumTimeout_ExpectAndReturn(SymbNum, cmock_retval) TEST_FAIL_MESSAGE("SetLoRaSymbNumTimeout requires _Expect (not AndReturn)");
#define SetLoRaSymbNumTimeout_Expect(SymbNum) SetLoRaSymbNumTimeout_CMockExpect(__LINE__, SymbNum)
void SetLoRaSymbNumTimeout_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t SymbNum);
typedef void (* CMOCK_SetLoRaSymbNumTimeout_CALLBACK)(uint8_t SymbNum, int cmock_num_calls);
void SetLoRaSymbNumTimeout_AddCallback(CMOCK_SetLoRaSymbNumTimeout_CALLBACK Callback);
void SetLoRaSymbNumTimeout_Stub(CMOCK_SetLoRaSymbNumTimeout_CALLBACK Callback);
#define SetLoRaSymbNumTimeout_StubWithCallback SetLoRaSymbNumTimeout_Stub
#define SetPacketType_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetPacketType requires _Ignore (not AndReturn)");
#define SetPacketType_Ignore() SetPacketType_CMockIgnore()
void SetPacketType_CMockIgnore(void);
#define SetPacketType_StopIgnore() SetPacketType_CMockStopIgnore()
void SetPacketType_CMockStopIgnore(void);
#define SetPacketType_ExpectAndReturn(packetType, cmock_retval) TEST_FAIL_MESSAGE("SetPacketType requires _Expect (not AndReturn)");
#define SetPacketType_Expect(packetType) SetPacketType_CMockExpect(__LINE__, packetType)
void SetPacketType_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t packetType);
typedef void (* CMOCK_SetPacketType_CALLBACK)(uint8_t packetType, int cmock_num_calls);
void SetPacketType_AddCallback(CMOCK_SetPacketType_CALLBACK Callback);
void SetPacketType_Stub(CMOCK_SetPacketType_CALLBACK Callback);
#define SetPacketType_StubWithCallback SetPacketType_Stub
#define SetModulationParams_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetModulationParams requires _Ignore (not AndReturn)");
#define SetModulationParams_Ignore() SetModulationParams_CMockIgnore()
void SetModulationParams_CMockIgnore(void);
#define SetModulationParams_StopIgnore() SetModulationParams_CMockStopIgnore()
void SetModulationParams_CMockStopIgnore(void);
#define SetModulationParams_ExpectAndReturn(spreadingFactor, bandwidth, codingRate, lowDataRateOptimize, cmock_retval) TEST_FAIL_MESSAGE("SetModulationParams requires _Expect (not AndReturn)");
#define SetModulationParams_Expect(spreadingFactor, bandwidth, codingRate, lowDataRateOptimize) SetModulationParams_CMockExpect(__LINE__, spreadingFactor, bandwidth, codingRate, lowDataRateOptimize)
void SetModulationParams_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t spreadingFactor, uint8_t bandwidth, uint8_t codingRate, uint8_t lowDataRateOptimize);
typedef void (* CMOCK_SetModulationParams_CALLBACK)(uint8_t spreadingFactor, uint8_t bandwidth, uint8_t codingRate, uint8_t lowDataRateOptimize, int cmock_num_calls);
void SetModulationParams_AddCallback(CMOCK_SetModulationParams_CALLBACK Callback);
void SetModulationParams_Stub(CMOCK_SetModulationParams_CALLBACK Callback);
#define SetModulationParams_StubWithCallback SetModulationParams_Stub
#define SetCadParams_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetCadParams requires _Ignore (not AndReturn)");
#define SetCadParams_Ignore() SetCadParams_CMockIgnore()
void SetCadParams_CMockIgnore(void);
#define SetCadParams_StopIgnore() SetCadParams_CMockStopIgnore()
void SetCadParams_CMockStopIgnore(void);
#define SetCadParams_ExpectAndReturn(cadSymbolNum, cadDetPeak, cadDetMin, cadExitMode, cadTimeout, cmock_retval) TEST_FAIL_MESSAGE("SetCadParams requires _Expect (not AndReturn)");
#define SetCadParams_Expect(cadSymbolNum, cadDetPeak, cadDetMin, cadExitMode, cadTimeout) SetCadParams_CMockExpect(__LINE__, cadSymbolNum, cadDetPeak, cadDetMin, cadExitMode, cadTimeout)
void SetCadParams_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout);
typedef void (* CMOCK_SetCadParams_CALLBACK)(uint8_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout, int cmock_num_calls);
void SetCadParams_AddCallback(CMOCK_SetCadParams_CALLBACK Callback);
void SetCadParams_Stub(CMOCK_SetCadParams_CALLBACK Callback);
#define SetCadParams_StubWithCallback SetCadParams_Stub
#define SetCad_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetCad requires _Ignore (not AndReturn)");
#define SetCad_Ignore() SetCad_CMockIgnore()
void SetCad_CMockIgnore(void);
#define SetCad_StopIgnore() SetCad_CMockStopIgnore()
void SetCad_CMockStopIgnore(void);
#define SetCad_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetCad requires _Expect (not AndReturn)");
#define SetCad_Expect() SetCad_CMockExpect(__LINE__)
void SetCad_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SetCad_CALLBACK)(int cmock_num_calls);
void SetCad_AddCallback(CMOCK_SetCad_CALLBACK Callback);
void SetCad_Stub(CMOCK_SetCad_CALLBACK Callback);
#define SetCad_StubWithCallback SetCad_Stub
#define GetStatus_Ignore() TEST_FAIL_MESSAGE("GetStatus requires _IgnoreAndReturn");
#define GetStatus_IgnoreAndReturn(cmock_retval) GetStatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GetStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define GetStatus_StopIgnore() GetStatus_CMockStopIgnore()
void GetStatus_CMockStopIgnore(void);
#define GetStatus_Expect() TEST_FAIL_MESSAGE("GetStatus requires _ExpectAndReturn");
#define GetStatus_ExpectAndReturn(cmock_retval) GetStatus_CMockExpectAndReturn(__LINE__, cmock_retval)
void GetStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_GetStatus_CALLBACK)(int cmock_num_calls);
void GetStatus_AddCallback(CMOCK_GetStatus_CALLBACK Callback);
void GetStatus_Stub(CMOCK_GetStatus_CALLBACK Callback);
#define GetStatus_StubWithCallback GetStatus_Stub
#define GetIrqStatus_Ignore() TEST_FAIL_MESSAGE("GetIrqStatus requires _IgnoreAndReturn");
#define GetIrqStatus_IgnoreAndReturn(cmock_retval) GetIrqStatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GetIrqStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define GetIrqStatus_StopIgnore() GetIrqStatus_CMockStopIgnore()
void GetIrqStatus_CMockStopIgnore(void);
#define GetIrqStatus_Expect() TEST_FAIL_MESSAGE("GetIrqStatus requires _ExpectAndReturn");
#define GetIrqStatus_ExpectAndReturn(cmock_retval) GetIrqStatus_CMockExpectAndReturn(__LINE__, cmock_retval)
void GetIrqStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_GetIrqStatus_CALLBACK)(int cmock_num_calls);
void GetIrqStatus_AddCallback(CMOCK_GetIrqStatus_CALLBACK Callback);
void GetIrqStatus_Stub(CMOCK_GetIrqStatus_CALLBACK Callback);
#define GetIrqStatus_StubWithCallback GetIrqStatus_Stub
#define ClearIrqStatus_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("ClearIrqStatus requires _Ignore (not AndReturn)");
#define ClearIrqStatus_Ignore() ClearIrqStatus_CMockIgnore()
void ClearIrqStatus_CMockIgnore(void);
#define ClearIrqStatus_StopIgnore() ClearIrqStatus_CMockStopIgnore()
void ClearIrqStatus_CMockStopIgnore(void);
#define ClearIrqStatus_ExpectAndReturn(irq, cmock_retval) TEST_FAIL_MESSAGE("ClearIrqStatus requires _Expect (not AndReturn)");
#define ClearIrqStatus_Expect(irq) ClearIrqStatus_CMockExpect(__LINE__, irq)
void ClearIrqStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t irq);
typedef void (* CMOCK_ClearIrqStatus_CALLBACK)(uint16_t irq, int cmock_num_calls);
void ClearIrqStatus_AddCallback(CMOCK_ClearIrqStatus_CALLBACK Callback);
void ClearIrqStatus_Stub(CMOCK_ClearIrqStatus_CALLBACK Callback);
#define ClearIrqStatus_StubWithCallback ClearIrqStatus_Stub
#define SetTxEnable_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetTxEnable requires _Ignore (not AndReturn)");
#define SetTxEnable_Ignore() SetTxEnable_CMockIgnore()
void SetTxEnable_CMockIgnore(void);
#define SetTxEnable_StopIgnore() SetTxEnable_CMockStopIgnore()
void SetTxEnable_CMockStopIgnore(void);
#define SetTxEnable_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetTxEnable requires _Expect (not AndReturn)");
#define SetTxEnable_Expect() SetTxEnable_CMockExpect(__LINE__)
void SetTxEnable_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SetTxEnable_CALLBACK)(int cmock_num_calls);
void SetTxEnable_AddCallback(CMOCK_SetTxEnable_CALLBACK Callback);
void SetTxEnable_Stub(CMOCK_SetTxEnable_CALLBACK Callback);
#define SetTxEnable_StubWithCallback SetTxEnable_Stub
#define SetRxEnable_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetRxEnable requires _Ignore (not AndReturn)");
#define SetRxEnable_Ignore() SetRxEnable_CMockIgnore()
void SetRxEnable_CMockIgnore(void);
#define SetRxEnable_StopIgnore() SetRxEnable_CMockStopIgnore()
void SetRxEnable_CMockStopIgnore(void);
#define SetRxEnable_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetRxEnable requires _Expect (not AndReturn)");
#define SetRxEnable_Expect() SetRxEnable_CMockExpect(__LINE__)
void SetRxEnable_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SetRxEnable_CALLBACK)(int cmock_num_calls);
void SetRxEnable_AddCallback(CMOCK_SetRxEnable_CALLBACK Callback);
void SetRxEnable_Stub(CMOCK_SetRxEnable_CALLBACK Callback);
#define SetRxEnable_StubWithCallback SetRxEnable_Stub
#define SetRx_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetRx requires _Ignore (not AndReturn)");
#define SetRx_Ignore() SetRx_CMockIgnore()
void SetRx_CMockIgnore(void);
#define SetRx_StopIgnore() SetRx_CMockStopIgnore()
void SetRx_CMockStopIgnore(void);
#define SetRx_ExpectAndReturn(timeout, cmock_retval) TEST_FAIL_MESSAGE("SetRx requires _Expect (not AndReturn)");
#define SetRx_Expect(timeout) SetRx_CMockExpect(__LINE__, timeout)
void SetRx_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t timeout);
typedef void (* CMOCK_SetRx_CALLBACK)(uint32_t timeout, int cmock_num_calls);
void SetRx_AddCallback(CMOCK_SetRx_CALLBACK Callback);
void SetRx_Stub(CMOCK_SetRx_CALLBACK Callback);
#define SetRx_StubWithCallback SetRx_Stub
#define SetTx_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SetTx requires _Ignore (not AndReturn)");
#define SetTx_Ignore() SetTx_CMockIgnore()
void SetTx_CMockIgnore(void);
#define SetTx_StopIgnore() SetTx_CMockStopIgnore()
void SetTx_CMockStopIgnore(void);
#define SetTx_ExpectAndReturn(timeoutInMs, cmock_retval) TEST_FAIL_MESSAGE("SetTx requires _Expect (not AndReturn)");
#define SetTx_Expect(timeoutInMs) SetTx_CMockExpect(__LINE__, timeoutInMs)
void SetTx_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t timeoutInMs);
typedef void (* CMOCK_SetTx_CALLBACK)(uint32_t timeoutInMs, int cmock_num_calls);
void SetTx_AddCallback(CMOCK_SetTx_CALLBACK Callback);
void SetTx_Stub(CMOCK_SetTx_CALLBACK Callback);
#define SetTx_StubWithCallback SetTx_Stub
#define GetPacketLost_Ignore() TEST_FAIL_MESSAGE("GetPacketLost requires _IgnoreAndReturn");
#define GetPacketLost_IgnoreAndReturn(cmock_retval) GetPacketLost_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GetPacketLost_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define GetPacketLost_StopIgnore() GetPacketLost_CMockStopIgnore()
void GetPacketLost_CMockStopIgnore(void);
#define GetPacketLost_Expect() TEST_FAIL_MESSAGE("GetPacketLost requires _ExpectAndReturn");
#define GetPacketLost_ExpectAndReturn(cmock_retval) GetPacketLost_CMockExpectAndReturn(__LINE__, cmock_retval)
void GetPacketLost_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_GetPacketLost_CALLBACK)(int cmock_num_calls);
void GetPacketLost_AddCallback(CMOCK_GetPacketLost_CALLBACK Callback);
void GetPacketLost_Stub(CMOCK_GetPacketLost_CALLBACK Callback);
#define GetPacketLost_StubWithCallback GetPacketLost_Stub
#define GetRssiInst_Ignore() TEST_FAIL_MESSAGE("GetRssiInst requires _IgnoreAndReturn");
#define GetRssiInst_IgnoreAndReturn(cmock_retval) GetRssiInst_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GetRssiInst_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define GetRssiInst_StopIgnore() GetRssiInst_CMockStopIgnore()
void GetRssiInst_CMockStopIgnore(void);
#define GetRssiInst_Expect() TEST_FAIL_MESSAGE("GetRssiInst requires _ExpectAndReturn");
#define GetRssiInst_ExpectAndReturn(cmock_retval) GetRssiInst_CMockExpectAndReturn(__LINE__, cmock_retval)
void GetRssiInst_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_GetRssiInst_CALLBACK)(int cmock_num_calls);
void GetRssiInst_AddCallback(CMOCK_GetRssiInst_CALLBACK Callback);
void GetRssiInst_Stub(CMOCK_GetRssiInst_CALLBACK Callback);
#define GetRssiInst_StubWithCallback GetRssiInst_Stub
#define GetRxBufferStatus_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("GetRxBufferStatus requires _Ignore (not AndReturn)");
#define GetRxBufferStatus_Ignore() GetRxBufferStatus_CMockIgnore()
void GetRxBufferStatus_CMockIgnore(void);
#define GetRxBufferStatus_StopIgnore() GetRxBufferStatus_CMockStopIgnore()
void GetRxBufferStatus_CMockStopIgnore(void);
#define GetRxBufferStatus_ExpectAndReturn(payloadLength, rxStartBufferPointer, cmock_retval) TEST_FAIL_MESSAGE("GetRxBufferStatus requires _Expect (not AndReturn)");
#define GetRxBufferStatus_Expect(payloadLength, rxStartBufferPointer) GetRxBufferStatus_CMockExpect(__LINE__, payloadLength, rxStartBufferPointer)
void GetRxBufferStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* payloadLength, uint8_t* rxStartBufferPointer);
typedef void (* CMOCK_GetRxBufferStatus_CALLBACK)(uint8_t* payloadLength, uint8_t* rxStartBufferPointer, int cmock_num_calls);
void GetRxBufferStatus_AddCallback(CMOCK_GetRxBufferStatus_CALLBACK Callback);
void GetRxBufferStatus_Stub(CMOCK_GetRxBufferStatus_CALLBACK Callback);
#define GetRxBufferStatus_StubWithCallback GetRxBufferStatus_Stub
#define Wakeup_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("Wakeup requires _Ignore (not AndReturn)");
#define Wakeup_Ignore() Wakeup_CMockIgnore()
void Wakeup_CMockIgnore(void);
#define Wakeup_StopIgnore() Wakeup_CMockStopIgnore()
void Wakeup_CMockStopIgnore(void);
#define Wakeup_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("Wakeup requires _Expect (not AndReturn)");
#define Wakeup_Expect() Wakeup_CMockExpect(__LINE__)
void Wakeup_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Wakeup_CALLBACK)(int cmock_num_calls);
void Wakeup_AddCallback(CMOCK_Wakeup_CALLBACK Callback);
void Wakeup_Stub(CMOCK_Wakeup_CALLBACK Callback);
#define Wakeup_StubWithCallback Wakeup_Stub
#define WaitForIdleBegin_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("WaitForIdleBegin requires _Ignore (not AndReturn)");
#define WaitForIdleBegin_Ignore() WaitForIdleBegin_CMockIgnore()
void WaitForIdleBegin_CMockIgnore(void);
#define WaitForIdleBegin_StopIgnore() WaitForIdleBegin_CMockStopIgnore()
void WaitForIdleBegin_CMockStopIgnore(void);
#define WaitForIdleBegin_ExpectAndReturn(timeout, text, cmock_retval) TEST_FAIL_MESSAGE("WaitForIdleBegin requires _Expect (not AndReturn)");
#define WaitForIdleBegin_Expect(timeout, text) WaitForIdleBegin_CMockExpect(__LINE__, timeout, text)
void WaitForIdleBegin_CMockExpect(UNITY_LINE_TYPE cmock_line, unsigned long timeout, char* text);
typedef void (* CMOCK_WaitForIdleBegin_CALLBACK)(unsigned long timeout, char* text, int cmock_num_calls);
void WaitForIdleBegin_AddCallback(CMOCK_WaitForIdleBegin_CALLBACK Callback);
void WaitForIdleBegin_Stub(CMOCK_WaitForIdleBegin_CALLBACK Callback);
#define WaitForIdleBegin_StubWithCallback WaitForIdleBegin_Stub
#define WaitForIdle_Ignore() TEST_FAIL_MESSAGE("WaitForIdle requires _IgnoreAndReturn");
#define WaitForIdle_IgnoreAndReturn(cmock_retval) WaitForIdle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void WaitForIdle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define WaitForIdle_StopIgnore() WaitForIdle_CMockStopIgnore()
void WaitForIdle_CMockStopIgnore(void);
#define WaitForIdle_Expect(timeout, text, stop) TEST_FAIL_MESSAGE("WaitForIdle requires _ExpectAndReturn");
#define WaitForIdle_ExpectAndReturn(timeout, text, stop, cmock_retval) WaitForIdle_CMockExpectAndReturn(__LINE__, timeout, text, stop, cmock_retval)
void WaitForIdle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned long timeout, char* text, bool stop, bool cmock_to_return);
typedef bool (* CMOCK_WaitForIdle_CALLBACK)(unsigned long timeout, char* text, bool stop, int cmock_num_calls);
void WaitForIdle_AddCallback(CMOCK_WaitForIdle_CALLBACK Callback);
void WaitForIdle_Stub(CMOCK_WaitForIdle_CALLBACK Callback);
#define WaitForIdle_StubWithCallback WaitForIdle_Stub
#define ReadBuffer_Ignore() TEST_FAIL_MESSAGE("ReadBuffer requires _IgnoreAndReturn");
#define ReadBuffer_IgnoreAndReturn(cmock_retval) ReadBuffer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ReadBuffer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define ReadBuffer_StopIgnore() ReadBuffer_CMockStopIgnore()
void ReadBuffer_CMockStopIgnore(void);
#define ReadBuffer_Expect(rxData, rxDataLen) TEST_FAIL_MESSAGE("ReadBuffer requires _ExpectAndReturn");
#define ReadBuffer_ExpectAndReturn(rxData, rxDataLen, cmock_retval) ReadBuffer_CMockExpectAndReturn(__LINE__, rxData, rxDataLen, cmock_retval)
void ReadBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* rxData, int16_t rxDataLen, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_ReadBuffer_CALLBACK)(uint8_t* rxData, int16_t rxDataLen, int cmock_num_calls);
void ReadBuffer_AddCallback(CMOCK_ReadBuffer_CALLBACK Callback);
void ReadBuffer_Stub(CMOCK_ReadBuffer_CALLBACK Callback);
#define ReadBuffer_StubWithCallback ReadBuffer_Stub
#define WriteBuffer_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("WriteBuffer requires _Ignore (not AndReturn)");
#define WriteBuffer_Ignore() WriteBuffer_CMockIgnore()
void WriteBuffer_CMockIgnore(void);
#define WriteBuffer_StopIgnore() WriteBuffer_CMockStopIgnore()
void WriteBuffer_CMockStopIgnore(void);
#define WriteBuffer_ExpectAndReturn(txData, txDataLen, cmock_retval) TEST_FAIL_MESSAGE("WriteBuffer requires _Expect (not AndReturn)");
#define WriteBuffer_Expect(txData, txDataLen) WriteBuffer_CMockExpect(__LINE__, txData, txDataLen)
void WriteBuffer_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* txData, int16_t txDataLen);
typedef void (* CMOCK_WriteBuffer_CALLBACK)(uint8_t* txData, int16_t txDataLen, int cmock_num_calls);
void WriteBuffer_AddCallback(CMOCK_WriteBuffer_CALLBACK Callback);
void WriteBuffer_Stub(CMOCK_WriteBuffer_CALLBACK Callback);
#define WriteBuffer_StubWithCallback WriteBuffer_Stub
#define WriteRegister_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("WriteRegister requires _Ignore (not AndReturn)");
#define WriteRegister_Ignore() WriteRegister_CMockIgnore()
void WriteRegister_CMockIgnore(void);
#define WriteRegister_StopIgnore() WriteRegister_CMockStopIgnore()
void WriteRegister_CMockStopIgnore(void);
#define WriteRegister_ExpectAndReturn(reg, data, numBytes, cmock_retval) TEST_FAIL_MESSAGE("WriteRegister requires _Expect (not AndReturn)");
#define WriteRegister_Expect(reg, data, numBytes) WriteRegister_CMockExpect(__LINE__, reg, data, numBytes)
void WriteRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t reg, uint8_t* data, uint8_t numBytes);
typedef void (* CMOCK_WriteRegister_CALLBACK)(uint16_t reg, uint8_t* data, uint8_t numBytes, int cmock_num_calls);
void WriteRegister_AddCallback(CMOCK_WriteRegister_CALLBACK Callback);
void WriteRegister_Stub(CMOCK_WriteRegister_CALLBACK Callback);
#define WriteRegister_StubWithCallback WriteRegister_Stub
#define ReadRegister_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("ReadRegister requires _Ignore (not AndReturn)");
#define ReadRegister_Ignore() ReadRegister_CMockIgnore()
void ReadRegister_CMockIgnore(void);
#define ReadRegister_StopIgnore() ReadRegister_CMockStopIgnore()
void ReadRegister_CMockStopIgnore(void);
#define ReadRegister_ExpectAndReturn(reg, data, numBytes, cmock_retval) TEST_FAIL_MESSAGE("ReadRegister requires _Expect (not AndReturn)");
#define ReadRegister_Expect(reg, data, numBytes) ReadRegister_CMockExpect(__LINE__, reg, data, numBytes)
void ReadRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t reg, uint8_t* data, uint8_t numBytes);
typedef void (* CMOCK_ReadRegister_CALLBACK)(uint16_t reg, uint8_t* data, uint8_t numBytes, int cmock_num_calls);
void ReadRegister_AddCallback(CMOCK_ReadRegister_CALLBACK Callback);
void ReadRegister_Stub(CMOCK_ReadRegister_CALLBACK Callback);
#define ReadRegister_StubWithCallback ReadRegister_Stub
#define WriteCommand_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("WriteCommand requires _Ignore (not AndReturn)");
#define WriteCommand_Ignore() WriteCommand_CMockIgnore()
void WriteCommand_CMockIgnore(void);
#define WriteCommand_StopIgnore() WriteCommand_CMockStopIgnore()
void WriteCommand_CMockStopIgnore(void);
#define WriteCommand_ExpectAndReturn(cmd, data, numBytes, cmock_retval) TEST_FAIL_MESSAGE("WriteCommand requires _Expect (not AndReturn)");
#define WriteCommand_Expect(cmd, data, numBytes) WriteCommand_CMockExpect(__LINE__, cmd, data, numBytes)
void WriteCommand_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmd, uint8_t* data, uint8_t numBytes);
typedef void (* CMOCK_WriteCommand_CALLBACK)(uint8_t cmd, uint8_t* data, uint8_t numBytes, int cmock_num_calls);
void WriteCommand_AddCallback(CMOCK_WriteCommand_CALLBACK Callback);
void WriteCommand_Stub(CMOCK_WriteCommand_CALLBACK Callback);
#define WriteCommand_StubWithCallback WriteCommand_Stub
#define WriteCommand2_Ignore() TEST_FAIL_MESSAGE("WriteCommand2 requires _IgnoreAndReturn");
#define WriteCommand2_IgnoreAndReturn(cmock_retval) WriteCommand2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void WriteCommand2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define WriteCommand2_StopIgnore() WriteCommand2_CMockStopIgnore()
void WriteCommand2_CMockStopIgnore(void);
#define WriteCommand2_Expect(cmd, data, numBytes) TEST_FAIL_MESSAGE("WriteCommand2 requires _ExpectAndReturn");
#define WriteCommand2_ExpectAndReturn(cmd, data, numBytes, cmock_retval) WriteCommand2_CMockExpectAndReturn(__LINE__, cmd, data, numBytes, cmock_retval)
void WriteCommand2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmd, uint8_t* data, uint8_t numBytes, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_WriteCommand2_CALLBACK)(uint8_t cmd, uint8_t* data, uint8_t numBytes, int cmock_num_calls);
void WriteCommand2_AddCallback(CMOCK_WriteCommand2_CALLBACK Callback);
void WriteCommand2_Stub(CMOCK_WriteCommand2_CALLBACK Callback);
#define WriteCommand2_StubWithCallback WriteCommand2_Stub
#define ReadCommand_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("ReadCommand requires _Ignore (not AndReturn)");
#define ReadCommand_Ignore() ReadCommand_CMockIgnore()
void ReadCommand_CMockIgnore(void);
#define ReadCommand_StopIgnore() ReadCommand_CMockStopIgnore()
void ReadCommand_CMockStopIgnore(void);
#define ReadCommand_ExpectAndReturn(cmd, data, numBytes, cmock_retval) TEST_FAIL_MESSAGE("ReadCommand requires _Expect (not AndReturn)");
#define ReadCommand_Expect(cmd, data, numBytes) ReadCommand_CMockExpect(__LINE__, cmd, data, numBytes)
void ReadCommand_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmd, uint8_t* data, uint8_t numBytes);
typedef void (* CMOCK_ReadCommand_CALLBACK)(uint8_t cmd, uint8_t* data, uint8_t numBytes, int cmock_num_calls);
void ReadCommand_AddCallback(CMOCK_ReadCommand_CALLBACK Callback);
void ReadCommand_Stub(CMOCK_ReadCommand_CALLBACK Callback);
#define ReadCommand_StubWithCallback ReadCommand_Stub
#define SPItransfer_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SPItransfer requires _Ignore (not AndReturn)");
#define SPItransfer_Ignore() SPItransfer_CMockIgnore()
void SPItransfer_CMockIgnore(void);
#define SPItransfer_StopIgnore() SPItransfer_CMockStopIgnore()
void SPItransfer_CMockStopIgnore(void);
#define SPItransfer_ExpectAndReturn(cmd, write, dataOut, dataIn, numBytes, waitForBusy, cmock_retval) TEST_FAIL_MESSAGE("SPItransfer requires _Expect (not AndReturn)");
#define SPItransfer_Expect(cmd, write, dataOut, dataIn, numBytes, waitForBusy) SPItransfer_CMockExpect(__LINE__, cmd, write, dataOut, dataIn, numBytes, waitForBusy)
void SPItransfer_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmd, bool write, uint8_t* dataOut, uint8_t* dataIn, uint8_t numBytes, bool waitForBusy);
typedef void (* CMOCK_SPItransfer_CALLBACK)(uint8_t cmd, bool write, uint8_t* dataOut, uint8_t* dataIn, uint8_t numBytes, bool waitForBusy, int cmock_num_calls);
void SPItransfer_AddCallback(CMOCK_SPItransfer_CALLBACK Callback);
void SPItransfer_Stub(CMOCK_SPItransfer_CALLBACK Callback);
#define SPItransfer_StubWithCallback SPItransfer_Stub
#define LoRaError_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LoRaError requires _Ignore (not AndReturn)");
#define LoRaError_Ignore() LoRaError_CMockIgnore()
void LoRaError_CMockIgnore(void);
#define LoRaError_StopIgnore() LoRaError_CMockStopIgnore()
void LoRaError_CMockStopIgnore(void);
#define LoRaError_ExpectAndReturn(error, cmock_retval) TEST_FAIL_MESSAGE("LoRaError requires _Expect (not AndReturn)");
#define LoRaError_Expect(error) LoRaError_CMockExpect(__LINE__, error)
void LoRaError_CMockExpect(UNITY_LINE_TYPE cmock_line, int error);
typedef void (* CMOCK_LoRaError_CALLBACK)(int error, int cmock_num_calls);
void LoRaError_AddCallback(CMOCK_LoRaError_CALLBACK Callback);
void LoRaError_Stub(CMOCK_LoRaError_CALLBACK Callback);
#define LoRaError_StubWithCallback LoRaError_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
